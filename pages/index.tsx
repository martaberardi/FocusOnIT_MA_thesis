import type {NextPage} from 'next';
import Head from 'next/head';
import {DataStore} from '@aws-amplify/datastore';
import React, {useEffect, useState} from 'react';
import {withAuthenticator} from '@aws-amplify/ui-react';
import {useDispatch, useSelector} from 'react-redux';
import Link from 'next/link';
import {Button, Card, CardActions, CardHeader} from '@mui/material';
import * as routes from '../src/routes';
import {PartOfSpeech, Stats, Topic} from '../models';
import styles from '../styles/Home.module.css';
import ExerciseMedia from '../src/components/ExerciseMedia';
import useDialogsHandler from "../src/hook/useDialogsHandler";
import {Store} from "../src/store";
import PosProgress from "../src/components/PosProgress";
import {POSProgress} from "../src/components/PosProgress/PosProgress";
import useUserHandler from "../src/hook/useUserHandler";

const Home: NextPage = function () {
  const dispatch = useDispatch();
  const dialogs = useSelector((state: Store) => state.dialogs);
  const user = useSelector((store: Store) => store.userData.user);
  const [posProgress, setPosProgress] = useState<POSProgress>();
  const [stats, setStats] = useState<Stats[]>();
  useDialogsHandler(dispatch);
  useUserHandler(dispatch);

  useEffect(() => {
    if (user) {
      DataStore.query(Stats, (s) => s.userID("eq", user.id))
        .then((result: Stats[]) => {
          setStats(result)
        });
    }
  }, [user])

  useEffect(() => {
    if (stats) {
      const noDuplicationPos = stats
        .reduce((result, currentStats) => {
            if (!result.has(currentStats.dialogId)) {
              result.set(currentStats.dialogId, new Set<PartOfSpeech>());
            }
            result.get(currentStats.dialogId)!.add(currentStats.pos as PartOfSpeech);
            return result;
          },
          new Map() as POSProgress)

      setPosProgress(noDuplicationPos);
    }
  }, [stats])

  return (
    <div className={styles.container}>
      <Head>
        <title>Focus On IT</title>
        <meta name="description" content="Generated by create next app"/>
        <link rel="icon" href="/favicon.ico"/>
      </Head>
      <h2>Men√π</h2>
      <div className="card-list">
        {
          [...dialogs.values()]
            .filter(dialog => dialog.createdAt)
            .sort((d1, d2) => (new Date( d1.createdAt!)).getTime() - (new Date( d2.createdAt!)).getTime())
            .map((dialog) => (
            <Card sx={{maxWidth: 500}} key={dialog.id}>
              <CardHeader title={dialog.title}/>
              <ExerciseMedia topic={dialog.topic as Topic}/>
              <CardActions>
                <Link href={routes.EXERCISE_PAGE(dialog.id)}>
                  <Button variant="outlined" size="small" style={{margin: "auto"}}>Esercizio</Button>
                </Link>
              </CardActions>
              {posProgress && <PosProgress posProgress={posProgress} dialogId={dialog.id}/>}
            </Card>
          ))
        }
      </div>

    </div>
  );
};

export default withAuthenticator(Home);
